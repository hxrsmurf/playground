# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 7-22/6 * * *'

  push:
    branches: [ "nextjs-spotify-public/*"]

  workflow_dispatch:

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: testing           # set this to your Amazon ECR repository name
  ECS_SERVICE: nextjs-spotify-public                 # set this to your Amazon ECS service name
  ECS_CLUSTER: nextjs-spotify-public                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: nextjs-spotify-public           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    if: true

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      if: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      if: false

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
      if: false

    - name: Delete Year
      working-directory: nextjs-spotify-public
      run: rm -rf pages/2022.tsx
      if: false

    - name: Build and push Docker image
      id: build-and-push
      # uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      uses: docker/build-push-action@v4
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      if: false
      with:
        context: nextjs-spotify-public
        file: ./nextjs-spotify-public/Dockerfile
        # push: ${{ github.event_name != 'pull_request' }}
        push: true
        tags: ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest
        # labels: ${{ steps.meta.outputs.labels }}
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        build-args: |
          ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TABLE=${{ secrets.TABLE }}
          TABLE_INDEX=${{ secrets.TABLE_INDEX }}
          REGION=${{ secrets.REGION }}
          DEVICE_DESKTOP=${{ secrets.DEVICE_DESKTOP }}
          DEVICE_LAPTOP=${{ secrets.DEVICE_LAPTOP }}
          DEVICE_TABLET=${{ secrets.DEVICE_TABLET }}
          DEVICE_SAMSUNG=${{ secrets.DEVICE_SAMSUNG }}
          LATEST_MONTH=${{ secrets.LATEST_MONTH }}
          LATEST_YEAR=${{ secrets.LATEST_YEAR }}

    - name: EC2 List AutoScaling Group
      id: listASG
      if: true
      run: |
        asg=$(aws autoscaling describe-auto-scaling-instances --query "AutoScalingInstances[?AutoScalingGroupName=='nextjs-spotify-public'].InstanceId" --output text)
        echo "asg=$asg" >> $GITHUB_OUTPUT
        echo "$asg" >> $GITHUB_STEP_SUMMARY

    - name: Set ASG Instance Unhealthy
      id: setASGUnhealthy
      env:
        instance_id: ${{ steps.listAsg.outputs.asg }}
      if: true
      run: |
        aws autoscaling set-instance-health $instance_id --health-status "Unhealthy" --no-should-respect-grace-period

    - name: ECS List Clusters
      id: listClusters
      if: false
      run: |
        cluster=$(aws ecs list-clusters | jq .clusterArns[0])
        echo "cluster=$cluster" >> $GITHUB_OUTPUT

    - name: ECS List Tasks
      id: listTasks
      if: false
      run: |
        task=$(aws ecs list-tasks --cluster ${{ steps.listClusters.outputs.cluster }} | jq .taskArns[0])
        echo $task
        echo "task=$task" >> $GITHUB_OUTPUT

    - name: ECS Stop Task
      if: false
      run: |
        aws ecs stop-task --task ${{ steps.listTasks.outputs.task }} --cluster ${{ steps.listClusters.outputs.cluster }}

  cleanupECR:
    name: Delete Old ECR
    if: false
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: List ECR Images
      run: |
        images=$(aws ecr list-images --repository-name ${{ env.ECR_REPOSITORY }} | jq --raw-output '.imageIds[] | "\(.imageDigest)"')
        # echo $images
        for image in $images
        do
          echo $image
          aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageDigest=$image
        done
